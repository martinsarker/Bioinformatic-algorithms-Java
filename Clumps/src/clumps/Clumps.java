
package clumps;


public class Clumps {
        // tu definujem vsetky premenne
        static int l = 523; // velkost okna
        static int n = 11;  // ake velke n-mery  
        static int t = 19; // kolkokrat sa opakuje
        static String sequence = "AGGATCCTGCCTCACGAATACACTTAAGCTTCGCACACAACCCAGAAGATGGTGTTGTTAGCAACAGTCTTAAGAGGCTACGCAGAGGCCCGGAACATGTATTGCATGGAGGGTCTTCGGGAGCGCGTCTTCTAGAACACGGCCGAGCGGTTGAAGACTGTGGGGCGCCGAGCTCGCGTCTTAACCGAAATATCTCCAAGGGAGCGGATGGTCTTGTCGACTATTCCAGACCCTGATTAACCTTGTTGATCTCATCTAGGTCCGCTAGTATGATCTCATCTCATCTTGTGATCTCATAGAGGTACCGCTTGGTACCGCTTGGTACCGGTACTGATCTGATCTCATTCTCATTGGTACCCACTTGGTACCTGGTACCTATTTTTCCCTTGGTACCCTTGGTACCGATGAGCAGTGTTCACACAAACTGCGTTGCTTGGTATGATCTCATTCTTGATCTCATACTGATCTCATCTTGGTACCGTGTTTTGATCTCATGACACATGATCTCATTCTTGGTACCATCATGATCTCATTCTCATGATCTTGATCTCATCTCATACCTACTGATCTCATACCATATCAGCATATCAGACCATATCAGACCTTGGTACCGGTATGATCTCATCATCTTGGTACCCCCAGACCGCAGCGATGATCTCTGATCTCATTGATCTCATTGATCTCATCATTCAGGAAAGGTAGTGATTGATCTCATTCATCATGATCTCATTACACCATATCAGTGACTATGGCACCTGATCTCATCAGATTGCAAAGGCTGATCTCATCATATCAGGATATCAGTTAACAGTACGTCGGTAGTGATCTCATTATCAGCACCATATCAGACCACCATATCAGGTATCAGAGAAGCCCCACCATATCAGTCATGAATAGATCTGCGTCGTTCAAAAATAATCCCTTGCATTGCCCGCCTACAATCACCATATCAGCTCTGTAGGTACTTTGTCACCATATCAGGTCCTTTGTAGATCATTGACCAGTTCTGGCCATCTGGTTTGCAGACGGGGGGAGGTCTAGCTGACGTGTATGTAACCGCTTCATGTGTACAAGATAGTGCTCTTTCGAATGAATTGGTCGCAGTGTTCCGGCTTTAGGGGGTAACCCAGCCCCTGCCAACAAGATCAGTGAATTCGATGCGCTGCCCCAGATCTTGTTGAATCACAATTGAATCACCAGGTGTTGAATCACCAGGCCATGCCATACACACGGCAGGCAAGAGGTCGAAGCCTTTGATTGAATCACACCGTCAATTCCGACCTTTGAATCACAACCACACATTGAATCACGAATCACCCAGTCCGGCACGATGATATTCCAAGTAACCAGTTGAATCACTCACTGCGCGGCTACGTGTGTTTATTGAATCACCAAGTCCTCAGTTGAATCACATCACGTCGGATACTCGTTTGAATCACAACAATATGCCCCGATGTGCGTATTGAATCACACCAAGTATTTGAATCACCTCTGGCTGTTTAAAACTCCGGGTGGCCAGGTTGCCTTATTGCACCGAGTTGAATCACGATTGAATTGAATCACCATGTTTGAATCACCGCCATTGAATCACCACGCAAGCATTGAATCACACACACGTACAGGAGCATCGATCGGATCCCGCGCCGAATATTGTATCTCTTGAATCACTGATTGAATCACTCAAAGGCCATGTTGAATCACTCACCACTGAGCCTACTTAACGAGCTTTGAATCACAATGCACACGTGATAGCTGTCTTACATAACGTGGTTCCAATTAGTAGGAGGCCAGTCGCTGATTATCTATAGTACGAGGGCATTGCTCAGAATGGCTGGCCTAACTATCGATGACATACCCTACCCCCCATAATCTTCCGAATGGTATCTAACGCCTTAATTTCTCCGCAGAGGGAGGGCATCTCCGCAGTATCTCCGCAGCAGCGGCTCTCCGCAGCGCAGCGGGGTGCCGAAGTTCACTTTCTTGCTCTCCGCAGAGATCTCTCCGCAGCTCCGCAGCTCCCAGCTGCTAGATTGAATGTCGAGCCTTAACGGTGGGGTTCTGTCTCCGCAGCAGGACATCCCATACGGGATGGATTCAAATCTCGATACTCTCCGCAGGCTCATTCTCCGCAGTTTACTTCTCTCCGCAGTCCGCAGATCAAAGTTGTCTCCGCAGCTCCGCAGGGCGATTTCTCCGCAGTGTCTCCGCAGCCCTCTCCGCAGGCGATCTCCGCAGCTCGTCTCCGCAGGCCGCTCTCCGCAGTCTCCGCAGTTATCCTCTCTCCGCAGCCTCCTCCTCTCCGCAGCTGGCGAGTCATTCTCCGCAGGGCGCTCCAATACCATATATCTCCGCAGCAACTCATTCCTCCATTGGATAATGCATTCCTCCGCAGCGGGATCTCCGCAGTCCTCCTCGGCATTCCTCCGTGCGGATCGCATGTTAAGCATTCCTCCTCCCGCATACCGTTAGCATTCCTCCTTCCTCCCCCCACGACTGCCGGGCCTGTGCACCCATTCCTCCGCTTACACCTGGGGACATTCCTCCTCCTCACACATTCCTCCTTGAATCCGCACCATTCCTCCGAAATACCTGTTGTACACCATTCCTCCTACCATTCCTCCACTTTCCTGACCCATTCCTCCCCCATGGGGGCCCATTCCTCCATTATCGGCCAACCATTCCTCCCGCAAACATCCTGACGACATTCCTCCCAGCCCTAGCAAGTTGCTTGACGTCTTGGTCCCGCATTCCTCCCTGCTAGTCGCTGTCTTGATTAGTAGTGCGCACTGTGACAGTGAGCCCGGCATATGGAAATTTGCGTAGTGTGAGCTCTTTGACCACCATCGTCGGATCTAGGCCGGGGAAACAGCATCAAACCACCAAATTGGTTTCCGCACCTGTTTCTGTTTACTCTTTACTCTCCGCTGTTTACTCTCCAGTGGCTTCGTCTTATGCTGCTGTTTACTCTGGCTGTTTACTCCTGTCTGTTTACTCGTCGACTGTTTACTCTCCCAGGTGCGAGAGGAACTCTCGTACTGTTTACTCTACAAGGTACTGAATAACAGACTAACAAACCGTGTACTCGTCGCAGGACCCTCCCTAGAGTATTTGGTGATAGAGAAGGGAACTGTTCTGTTTACTCACCTGTTCTGCTGTTTACTCTTTACTCCTGTTTACTCTTCGTGCGGGCTTCTCTGTTTACTCTCACTAGCTGTTTACTCCCCTGTTTACTCTGTTTACTCATGGCGTCCCCCTTTCTGTTTACTCTTTACTCTACACCTTCTGTTTACTCCTCTGTTTACTCACTGTTTACTCAAGAGACACAGCTCAATGCCTGTTTACTGTTTACTCCCCCGCAACTGTTTACTCTGCGACGGGCGAGTTTCAGTTAGTGCAGCTCAACCACCTGCTACGTGATCTAATCTAACATTTTGACCCACTGTTTACTCTCTTAGTCTAGTAACTCCAAGAATTGTTTCCGCATCAATGTAGTACTTCACCGTCTAGCGAGAAGTAGGCATATAGGGGCACAAGCGACCAAAACGGGCACGGCCCGTAAACTCGATATGAGAGTTGAGGTAAAGGAGTGCACAGTCTGAAGGGTCTCTAACGGGTGGTAAGCTCAAAATACATCGTGCCCGGCTCTGGCGACGCCACCGTACTGCATTCATATCAGTCTTTCTTCCTGAAAGTTATCACGGTTTCGCGCTGGCCAAGGAATTCAACGGGCCTATACAAGTCAGCTACCAATCAACAGTTGCGACACCCCATTGACAGCGTACGCGTCGGGCTCGTTTCATCAACAACTAATCCGTACCCCGGTTACTCGACTTCACACAAAGTGTAGTCTACGCCGGTATTTCGTGTAAATCTACCCTAGACACAGCCCTCTCGGGCTTCGGTAACAGGGCCTCTCGGGCTGGCTCTCCTCTCGGGCTGGCCAGATCCCCTCTCGCCTCTCGGGCTTCAGGGATCAGACCCTCTCGGGCTTTCATTGTTGGAGCATGGTCACAACTCGTTCTGAGCCTCTCGGGCCTCTCGGGCTACGGAAGAAACGAAAACCCCAAGAGACAGGCTGTAATGCGCAGCGTGTGGCTTTATTCCTCCCTCTCGGGCTCCCTCTCGGGCTAAGACCAATGATTAGTGGTAGGCCCTCTCGGGCTCCTCTCGGGCTTCCCTCTAACCTCTCGGGCCTCTCGGGCTGGGCTTGCGGAGACGCTTGCCTCTCGGGCTATTTCACCTCTCGGGCTGAGCGCGTTCCACGTTGGAACCTCTCGGGCTTGAACTTCCCACACTACTTAGGATCAGAGCTAGCGATACCCAGCCTCTCGGGCTTCTCGGGCTCCCTCTCGGGCTGAACGGGTCGGCCTCTCGGGCTGCCCTCTCGGGCTATCCAATGATTGTCATACGCTCCCTCTCTGATAACCTCTCCCTCTCGGGCTTCCTCTCGGGCTTTAAACCCTCTCGGGCTGACACCCGGGCGGCATGGTTGAGTACCAGATCCAGTTGGCGTACATCTCTAACACCACGATGTACGTTTGCTGACAGAAGTGTGCTTGAAGCCAGCTCCTTATGGGGGGGTCTGCTGCTGGACCTTGCCGTAAGAGCGAGCGGGCTCTGGGTACGCTGTGGTATCTAGAACCCTTAGGAACGGGGGTGCGAGGTCACAACTACCTCAGGTCTATGGCGACTGCCTTCTATGACGAAGTTGGCCCGCTGTTAAGCATGGTCAAAATCGATCTTCGAAAAGAGTCGATATATGTTTCTCGGATTTGAGCTTCCGCAAATGTGGCCCGCCAGATCGGAACTCCGGTCGAATCCACGGGGAAGAATTCATGTCCGTGCCGCAATCAGGCGTCGAGAACCACACGAAAACAAGAGGTTAATTGGTGGGATAGCTCATAGACCGATCGTGGGGTTCAGGCTGATTTGCAAAAAGGCCCAATACCGTGGTCAGTTACGCCGATCGCGATAGGCGTAGTAACACTACTGATACTATGCTCGGAAGTAGCGGTGAGCGCCATAAGAAATATATCTCAGGCTCCACACCTACAGTTTTAGACTATGGCCATAGCATTGGGGCACCCAAAGGTGATACAGTAGTTTAGTGATCCATGGAGGTTGGAATGGTGAAAGCCATTTATGACCGGCGACCACTAGCGCTCACGAAGCTGCACTCAGCAGTCAGGTACACACGAGTTCTCCAGAGTTCGTGGGCAATTAGTCCGTCAATTTAAACAGACCTCTCTATGAAACCGGCTGGCGGAGCCACAGCGATTGGGCAAGAGTGGAAGTATGGTTGGATAGGTTTACCTAACAATCCGAGTGCCTAGCCGCCCTTGGGATAGGACTGAACCATAGCGCCTACCGAAGTCCGACAGATAACATGACTGTCTTATTCGTCGAGTGAAGAAACATTGCTCTTAGACAGTTAGTGTCAGATCAGAGTTCGAATCTGCCGGCTCTCAGCGCAACGCCAGCTATTTACGAGCTGTCCTTTAGGCATTTGTTGACCATTTTCGTCCGGATCATTAACCTCGAAATGAGCGTACCATACGTTAGACGCTTGGCATTAGCATAGGTGTGGTAGGTCGATATGAGGTCCGAGGGTGGGCGATACAGCCCTCCCGTGCCCCAGGCATTCTGTTATCGTGCCACTTAAGGACGCATTTGTCGACGGCAGGAGCGAGAACCCATCGTAGGGGTCTCAGTGACTTTCGTCTTTCATATGCTATGGCCCATCATGCAGCGCGGATCTTTTCAGAATTAAAGTAGAAACGTGTTCACGTCTGCTGTCTCGGAGAGAAAAGGTGGCGCGAGAGGTAATGTTGAACCACGTCGTTTGTCTACGTTTAGGCAGGAGGGAATGTTAGGCCCCGATGCTAGCGCCGAGGAATGGAAGTCGGAGAACCGTAACTTGTCAGATTCCGTAGTGTTCACTTTGTCTACGTCCCAGTTAGGGTTGCCGTGAGAAGGTTTAAGAGACATCATGGTGCTAAGGCCTAAATGACACTTTAAAGGCTTAGACAGTCTTCCATACTACACGCGAATATAATGGTATATAATGAGCGGAACCATGGGCGAACCACCGAGAACGTCGATAGTAGGAGTCATGATTGATCACTGATTTCTAAAGAAGTACACACTCATGATTTGGCACATCGTTCTATTTGAAATCCCGTCTTGAACGGGTTTATAGCATGCTTTTACCATCTTCCGCGATCCCCACGCTCACCCGGTTCGTCTGAGGTACGGCCCGTATGCATTACTTAAAGTGTAAGCTTCTAAGCGGTGCTTGGCGCTGCATATTCCCTATTGTGATAAAGAGCGAAACCCAAACCCAGCTAACCCAGCTAACCCAGCTAGATAACCCAGCTAGCCCAGCTAGCCAGCTAAACCCAGCAACCCAGCTAGCCAGCTAGAACCCAGCTAGCTGAAAAAACCCAGCTAGAAACCCAGCTAGATTACGGGCTGTGCGTCTAATAAAAACCCAGCTAGAGGGTATTCTAAGTTGAACCCAGCTAGTCTTTTTGGTATTCAACCCAGCTAGGGATCCTAACCCAGCTAGCTCCTGTTTTGGTATTCTTAACCCAGCTAGTGGTATTCTGAAAACCCAACCCAGCTAGTGGTATTCTCAAATAACCCAGCTAGTGGTAAACCCAGCTAGGTAAACCCAGCTAGTCTCACATATTTGGTATTCTGAACCCAAACCCAGCTAGGTATTCTTGTCTGTTGGTATTCTAGCGTCACGTCACGATGCCTCCTGGGGCCCGAGGTAAACCCAAACCCAGCTAGCCAGCTAGGTATTCTCGTCATGCCTACAGCGTACAGCGTCAAACCCAGCTAGGTAGTTTGGTTGGTATTAACCCAGCTAGTAGGTATTCTGGAGGTTTTGGTATTCTGGTATTCTCAGCGTCACTCGCGCGACAGCGTCACGTCACCTTGGTATTCTTTATCACAGCGTCAATCTCTTGGTATTCTGAGGAGTTAGGGCTCGGGCACATAGATTCATTTGGTATTCTCTTGGTATTCTGTCATAAGAACATTGGTATTCTCTTGCAGATGGGTCGCGACCTTCCAATGGAACAGCGTCAACAGCGTCAAGGTCTGTGGACCAGGACAGCGTCAGTCATACGGCCCTCAATCAGAACAGCGTCAAGTTCCAGTTAAATTTTGGATATCTGGAATACTTTTATTAGCTAAATCTTATTCGGACTTGGGGCTAACGAGTGTCCACACAACTTTGACAGTACTACGGGAGTTCCGCGTTAGGCCACACAAACGGTCGGGACACGGTGTGAAGTTATAGTTATAACGTAGTGAGGCTGACTCGACGGATTAATTAGGAAGTGGGCATTATAAGCTTGTGGGGGGTAAAAAGCATTTACTCAACTGGCGAGGATAACTCAGGCGGTATTAGCATCGGTAAATTATAGGTAGCCGAATCAGTCGTCGGTGGCTTAAAGGCCTCGAACAGCTGACGAACTCATACAAGCGTGAAACGAACTGGCAGATCTCTCCCAGCACGACCTTGTGAGGTGAGAGGAATAAGTCCAACGCACTACCTGATCGACACTTTGTTCAAGGGCCGACGTGTAGTTTGAATTTGGCGACGGTGGCCCGAAGTTGCCCGTTGCACGTCAAAGGAGCTTCCCGCACTACAAACCGCGTCTGAGAGTCATATTGCTCATGGGTGACACCAGGCCTGATTTCACTGTCTCCAGAGAATTTTGCAGCGCCAATCAGAATTTTCCGAGAATTTTCCTCTTGCAGAATTTTCATTAAGAATTTTCGCAGGAATCTAAGAATTTTTGATTGAGAGAGAATTTTGAATTTTCGTAAACGCATGCATAACGAGAATTTTTGGGGGGCTTAAAACGGAAACAGAATTTTTGGGGAGAATTTTTAGAATTTTAAAGAATTTTATTTTATCATATTACCCGAGAATTTTACAGAAAGAATAGAATTTTCCCTTCGAGCTTGTAAGAATTTTCACAAGATCCCAGAGAATTTTTACGCATCATCTGCCGCTCTAGAATTTTTATTCAAAGAATTTTAGAGAAAGAATTTTATTCGATCGTGAGGGAACCTAGAATTTTGAATTTTCCCCTACTAGAATTTTAAAGAATTTTGACGTAGTTAACTAATTGAGTGTTAGTGCGTAGGTTATTTGGAAAGAATTTTAGAATTTTTTCGCACCGTTCGCACCGTTCGCACCGTTCGCACCGTTCGCACCATCGATCGTAGTTGCCGTAGTTGCACCGTTCGCACCGATCGTAGTTGCGCCACCGTTCGCACCGAGATAAGATACCTGAGATACCTGAGATAGATACCTGGCACCATCGTAGTTGCTCGCAAGATACCTGTCGTAGTTGAGATACCTGTATAGAGATACCTGTCGCACCGAGATACCTGACCTGTTATAGATACCTAGATACCTGAGATACCTGGTAGTTGCTCGCACCAGATACCTGCATCGTAGTTGCTGCCGAGATACCTGCCTGTGCAGATACCTGGTTGCTTGCATCGTAGTTGCATCGTAGTTGCATCGAGATACCTGTAGTTAGATACCTGGCATCGTAGTTGCATCGATCATCGTAGTTAGATACCTGTCGTAGTTGAGATACCTGCATCGTAGTTGCATCGTAGAGATACCTGTGAGATACCTGAGATAAGATACCTGTGAGATACCTGAGATACCTGAGATACCTGAGATACCTGAGATACCTGAGATACCTGAGATACCTGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGTAATAAGCTAATAAGAATAAGGAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAGGCTAATAAG";
        static int sequence_lenght=sequence.length();
        static String[] pole = new String[sequence_lenght];
        static String[] pole2 = new String[sequence.length()-n+1];
        static String[] pole_L = new String[sequence.length()-l+1];
        static int[] opakovania_pole2 = new int[sequence.length()-n+1];
        // koniec definovania premennych
        static String[] vytvorPole(String sequence){
              for (int i =0; i < sequence.length(); i++){
                  pole[i] = Character.toString(sequence.charAt(i));
                  
                  
              }
        
          
          return pole;
        }
        
        static String[] vytvorPole_n(){
              for (int i =0; i < sequence.length()-n+1; i++){ 
                  if (n ==3) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2];
                  else if (n ==4) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3];
                  else if (n ==5) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] ;
                  else if (n ==6) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5];
                  else if (n ==7) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6];
                  else if (n ==8) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7];
                  else if (n ==9) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8];
                  else if (n ==10) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8] + pole[i+9];
                  else if (n ==11) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8] + pole[i+9]+pole[i+10];
                  else if (n ==12) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8] + pole[i+9]+pole[i+10]+pole[i+11];
                  else if (n ==13) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8] + pole[i+9]+pole[i+10]+pole[i+11]+pole[i+12];
                  else if (n ==14) pole2[i] = pole[i] + pole[i + 1] + pole[i + 2] + pole[i + 3] +  pole[i + 4] + pole[i + 5] + pole[i+6] + pole[i+7] + pole[i+8] + pole[i+9]+pole[i+10]+pole[i+11]+pole[i+12] + pole[i+13];
              }
        
          
          return pole2;
        }
        static String[] vytvorPole_L(){
              for (int i =0; i <= sequence.length() - l  ; i++){                  
                  pole_L[i] = "";
                  for (int ii =0; ii < l; ii++){                 
                  pole_L[i] = pole_L[i] + pole[i + ii];
                  }
              }
        
          
          return pole_L;
        }
        
        
     static int vypisClumps (){
         int chujovina = 0; // metoda vyzaduje vratenie hodnoty ... 
         int riadok = 0;
         for (int i = 0; i <sequence.length() - n +1; i++) {             

                int opakovani = 0;                
                String sek = pole2[i];
                
                if ((i>l)&&(i<sequence.length()-l/2 - 1)) 
                for (int ii = i-l/2; ii < i + l/2; ii++) {                   
                    if (sek.equals(pole2[ii])) { opakovani++; }
                    if (opakovani >= t) {  System.out.print(pole2[i] + " "); opakovani = 0;}
                    
                }
                else if ((i>=sequence.length()-l/2 - 1)) 
                    for (int ii = i-l/2; ii < i; ii++) {                   
                    if (sek.equals(pole2[ii])) opakovani++;
                    if (opakovani >= t) {  System.out.print(pole2[i] + " "); opakovani = 0; }
                    
                }
                else if (i<l+1) 
                    for (int ii = 0; ii < l; ii++) {                   
                    if (sek.equals(pole2[ii])) opakovani++;
                    if (opakovani >= t) {  System.out.print(pole2[i] + " "); opakovani = 0; }
                }
                    
                
         }
         return chujovina;
     }
       
       
       
        static int vypisOpakovani(int minimalnyPocetOpakovani){
            int maximum = 0;
            for (int i =0; i < sequence.length()-n+1; i++){
                if (opakovania_pole2[i] >= minimalnyPocetOpakovani) {
                    System.out.println("Sekvencia: " + pole2[i] + " , pocet opakovani : " + opakovania_pole2[i]);
                }
            }
            
            
            return maximum;
        }
        static int vypisOpakovaniDoRiadku(int minimalnyPocetOpakovani){
            int maximum = 0;
            for (int i =0; i < sequence.length()-n+1; i++){
                if (opakovania_pole2[i] >= minimalnyPocetOpakovani) {
                    System.out.print( pole2[i] + " ");
                    if (i%10==0) System.out.println();
                }
            }
            
            
            return maximum;
        }
          
        
        
        

    public static void main(String[] args) {
        vytvorPole(sequence);
        vytvorPole_n();       
        vypisClumps();

        
        

        
        
        
        
       
        
        
        
  
      
    }
}
